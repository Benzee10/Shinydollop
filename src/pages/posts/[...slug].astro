---
import path from "node:path";
import License from "@components/misc/License.astro";
import Markdown from "@components/misc/Markdown.astro";
import I18nKey from "@i18n/i18nKey";
import { i18n } from "@i18n/translation";
import MainGridLayout from "@layouts/MainGridLayout.astro";
import { getSortedPosts } from "@utils/content-utils";
import { getDir, getPostUrlBySlug } from "@utils/url-utils";
import { Icon } from "astro-icon/components";
import { licenseConfig } from "src/config";
import ImageWrapper from "../../components/misc/ImageWrapper.astro";
import PostMetadata from "../../components/PostMeta.astro";
import BannerAd from "../../components/BannerAd.astro";
import TopBannerAd from "../../components/TopBannerAd.astro";
import RelatedGallery from "../../components/RelatedGallery.astro";
import InContentCTA from '../../components/InContentCTA.astro';
import ScrollProgressCTA from '../../components/ScrollProgressCTA.svelte';
import ImageOverlayCTA from '../../components/ImageOverlayCTA.astro';
import ContextualCTA from '../../components/ContextualCTA.astro';
import { profileConfig, siteConfig } from "../../config";
import { formatDateToYYYYMMDD } from "../../utils/date-utils";
import { findSimilarPosts } from "../../utils/similar-posts";

export async function getStaticPaths() {
        const blogEntries = await getSortedPosts();
        return blogEntries.map((entry) => ({
                params: { slug: entry.slug },
                props: { entry, allPosts: blogEntries },
        }));
}

const { entry, allPosts } = Astro.props;
const { Content, headings } = await entry.render();

const { remarkPluginFrontmatter } = await entry.render();

// Find similar posts
const similarPosts = findSimilarPosts(entry, allPosts, 4);

// Generate Open Graph image URL
let ogImageUrl = "";
if (entry.data.image) {
        if (entry.data.image.startsWith("http://") || entry.data.image.startsWith("https://")) {
                ogImageUrl = entry.data.image;
        } else if (entry.data.image.startsWith("/")) {
                ogImageUrl = new URL(entry.data.image, Astro.site).toString();
        } else {
                // Relative to markdown file
                const imagePath = path.join("content/posts/", getDir(entry.id), entry.data.image);
                ogImageUrl = new URL(imagePath, Astro.site).toString();
        }
}

// Debug: Log the OG image URL
console.log(`Post: ${entry.data.title}`);
console.log(`Original image: ${entry.data.image}`);
console.log(`Generated OG image URL: ${ogImageUrl}`);

// Generate short description for Open Graph (under 150 characters)
const ogDescription = entry.data.description 
        ? (entry.data.description.length > 150 
                ? entry.data.description.substring(0, 147) + "..." 
                : entry.data.description)
        : (entry.data.title.length > 150 
                ? entry.data.title.substring(0, 147) + "..." 
                : entry.data.title);

// Generate full post URL
const postUrl = new URL(`/posts/${entry.slug}/`, Astro.site).toString();

const jsonLd = {
        "@context": "https://schema.org",
        "@type": "BlogPosting",
        headline: entry.data.title,
        description: entry.data.description || entry.data.title,
        keywords: entry.data.tags,
        author: {
                "@type": "Person",
                name: profileConfig.name,
                url: Astro.site,
        },
        datePublished: formatDateToYYYYMMDD(entry.data.published),
        inLanguage: entry.data.lang
                ? entry.data.lang.replace("_", "-")
                : siteConfig.lang.replace("_", "-"),
        image: ogImageUrl,
};
---
<MainGridLayout banner={entry.data.image} title={entry.data.title} description={entry.data.description} lang={entry.data.lang} setOGTypeArticle={true} headings={headings}>
    <script is:inline slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>

    <!-- Open Graph Meta Tags -->
    <meta slot="head" property="og:title" content={entry.data.title} />
    <meta slot="head" property="og:description" content={ogDescription} />
    <meta slot="head" property="og:url" content={postUrl} />
    <meta slot="head" property="og:type" content="article" />
    <meta slot="head" property="og:site_name" content={siteConfig.title} />
    {ogImageUrl && (
        <>
            <meta slot="head" property="og:image" content={ogImageUrl} />
            <meta slot="head" property="og:image:width" content="1200" />
            <meta slot="head" property="og:image:height" content="1200" />
            <meta slot="head" property="og:image:type" content={ogImageUrl.toLowerCase().includes('.png') ? 'image/png' : 'image/jpeg'} />
            <meta slot="head" property="og:image:alt" content={entry.data.title} />
        </>
    )}
    <meta slot="head" property="article:published_time" content={entry.data.published.toISOString()} />
    {entry.data.updated && <meta slot="head" property="article:modified_time" content={entry.data.updated.toISOString()} />}
    {entry.data.tags && entry.data.tags.map((tag: string) => (
        <meta slot="head" property="article:tag" content={tag} />
    ))}
    {entry.data.category && <meta slot="head" property="article:section" content={entry.data.category} />}

    <!-- Twitter Card Meta Tags -->
    <meta slot="head" name="twitter:card" content="summary_large_image" />
    <meta slot="head" name="twitter:title" content={entry.data.title} />
    <meta slot="head" name="twitter:description" content={ogDescription} />
    {ogImageUrl && <meta slot="head" name="twitter:image" content={ogImageUrl} />}
    {ogImageUrl && <meta slot="head" name="twitter:image:alt" content={entry.data.title} />}
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- Top Banner Ad - Message Banner -->
            <TopBannerAd class="onload-animation" />
            
            <!-- word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{remarkPluginFrontmatter.words} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">
                        {remarkPluginFrontmatter.minutes} {" " + i18n(remarkPluginFrontmatter.minutes === 1 ? I18nKey.minuteCount : I18nKey.minutesCount)}
                    </div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.25rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {entry.data.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                        class="mb-5"
                        published={entry.data.published}
                        updated={entry.data.updated}
                        tags={entry.data.tags}
                        category={entry.data.category}
                ></PostMetadata>
                {!entry.data.image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- always show cover as long as it has one -->

            {entry.data.image &&
                <ImageWrapper id="post-cover" src={entry.data.image} basePath={path.join("content/posts/", getDir(entry.id))} class="mb-8 rounded-xl banner-container onload-animation"/>
            }

            <!-- Top Banner Ad -->
            <BannerAd position="top" class="onload-animation" imageUrl="https://i.postimg.cc/B6gn21rJ/preview-1-1.jpg" />

            <!-- Top Contextual CTA -->
            <ContextualCTA context="gallery" position="top" />

            <Markdown class="mb-6 markdown-content onload-animation" id="post-content">
                <Content />
            </Markdown>

            <!-- Middle Contextual CTA -->
            <ContextualCTA context="premium" position="middle" />

            <!-- Bottom Banner Ad -->
            <BannerAd position="bottom" class="onload-animation" imageUrl="https://i.postimg.cc/yx8Yj8Kc/preview-1.jpg" />

            <!-- Bottom Contextual CTA -->
            <ContextualCTA context="bio" position="bottom" />

            {licenseConfig.enable && <License title={entry.data.title} slug={entry.slug} pubDate={entry.data.published} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>

    <!-- New CTA Components -->
    <InContentCTA type="premium" position="block" />

    <!-- Related Gallery Section -->
    <RelatedGallery similarPosts={similarPosts} class="mb-8 onload-animation" />

    <div class="flex flex-col md:flex-row justify-between mb-4 gap-4 overflow-hidden w-full">
        <a href={entry.data.nextSlug ? getPostUrlBySlug(entry.data.nextSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.nextSlug}]}>
            {entry.data.nextSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-start gap-4" >
                <Icon name="material-symbols:chevron-left-rounded" class="text-[2rem] text-[var(--primary)]" />
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.nextTitle}
                </div>
            </div>}
        </a>

        <a href={entry.data.prevSlug ? getPostUrlBySlug(entry.data.prevSlug) : "#"}
           class:list={["w-full font-bold overflow-hidden active:scale-95", {"pointer-events-none": !entry.data.prevSlug}]}>
            {entry.data.prevSlug && <div class="btn-card rounded-2xl w-full h-[3.75rem] max-w-full px-4 flex items-center !justify-end gap-4">
                <div class="overflow-hidden transition overflow-ellipsis whitespace-nowrap max-w-[calc(100%_-_3rem)] text-black/75 dark:text-white/75">
                    {entry.data.prevTitle}
                </div>
                <Icon name="material-symbols:chevron-right-rounded" class="text-[2rem] text-[var(--primary)]" />
            </div>}
        </a>
    </div>

    <!-- Scroll Progress CTA -->
    <ScrollProgressCTA client:load />

</MainGridLayout>

<script>
  import BannerAd from "../../components/BannerAd.astro";

  document.addEventListener('DOMContentLoaded', function() {
    const postContent = document.getElementById('post-content');
    if (postContent) {
      const paragraphs = postContent.querySelectorAll('p');
      const images = postContent.querySelectorAll('img');
      const allElements = postContent.querySelectorAll('p, img, h1, h2, h3, h4, h5, h6');

      if (allElements.length > 2) {
        // Find the middle position (around 40-60% of content)
        const middleIndex = Math.floor(allElements.length * 0.5);
        const targetElement = allElements[middleIndex];

        // Create middle banner ad
        const middleBannerContainer = document.createElement('div');
        middleBannerContainer.className = 'banner-ad-container w-full flex justify-center my-6';
        middleBannerContainer.innerHTML = `
          <a href="https://redirect01-z56s-git-main-benzee10000s-projects.vercel.app/"
             target="_blank"
             rel="noopener noreferrer"
             class="banner-ad-link block w-full max-w-4xl transition-transform hover:scale-[1.02] active:scale-[0.98]"
             aria-label="Banner Advertisement - middle">
            <div class="banner-ad w-full h-40 md:h-48 rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition-all duration-300 relative">
              <img
                src="https://i.postimg.cc/tJS7GjTW/140e925065074859ca5d7721f5bb3883-20.jpg"
                alt="Advertisement"
                class="w-full h-full object-cover"
                loading="lazy"
              />
              <div class="absolute inset-0 bg-black/10 hover:bg-black/5 transition-all duration-300"></div>
            </div>
          </a>
        `;

        // Insert after the target element
        targetElement.parentNode.insertBefore(middleBannerContainer, targetElement.nextSibling);
      }
    }
  });
</script>

<style>
  .banner-ad {
    background: linear-gradient(135deg, #667ea 0%, #764ba2 100%);
    position: relative;
    overflow: hidden;
  }

  .banner-ad::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  .banner-ad-link:hover .banner-ad::before {
    left: 100%;
  }
</style>